--------------------------------------------------------------------
HEX   Plaintxt ---: 54454C4556495A4F52554C2045204844
HEX   Key --------: 444F52494E4120415245204341495345
--------------------------------------------------------------------

• Round Constant:
 rcon_1: 0x10
 rcon_2: 0x20
 rcon_3: 0x40
 rcon_4: 0x80
 rcon_5: 0x10
 rcon_6: 0x20
 rcon_7: 0x40
 rcon_8: 0x80
 rcon_9: 0x1b
 rcon_10: 0x36

Key Expansion:
--------------------------------------------------------------------
• first 4 words ar first 4 sublets of 8 chars in key
• w[i] = if i mod 4  = 0, w[i-4] ⊕ g(w[-1])
       							!= 0, w[i-2] ⊕ w[i-1]
w[0]: 444F5249
w[1]: 4E412041
w[2]: 52452043
w[3]: 41495345

g(w[3]) = ?
	• w[3] as 'w'
	• rcon_1 = 0x10
	1) <-LShift w: 49534541
	2) SubSbox w: 3bed6e83
	3) w * rcon_1
	3bed6e83 ⊕ 0x10 = 3aed6e83
	g(w[3])] =  3aed6e83
w[4] = w[0] ⊕ g(w[3]) = 3aed6e83

w[5] = w[3] ⊕ w[4] = 7ea23cca
w[6] = w[4] ⊕ w[5] = 30e31c8b
w[7] = w[5] ⊕ w[6] = 62a63cc8

g(w[7]) = ?
	• w[7] as 'w'
	• rcon_2 = 0x20
	1) <-LShift w: ef6f8d23
	2) SubSbox w: dfa85d26
	3) w * rcon_2
	dfa85d26 ⊕ 0x20 = dda85d26
	g(w[7])] =  dda85d26
w[8] = w[4] ⊕ g(w[7]) = dda85d26

w[9] = w[7] ⊕ w[8] = a30a61ec
w[10] = w[8] ⊕ w[9] = 93e97d67
w[11] = w[9] ⊕ w[10] = f14f41af

g(w[11]) = ?
	• w[11] as 'w'
	• rcon_3 = 0x40
	1) <-LShift w: a02e22d2
	2) SubSbox w: e03193b5
	3) w * rcon_3
	e03193b5 ⊕ 0x40 = e43193b5
	g(w[11])] =  e43193b5
w[12] = w[8] ⊕ g(w[11]) = e43193b5

w[13] = w[11] ⊕ w[12] = 473bf259
w[14] = w[12] ⊕ w[13] = d4d28f3e
w[15] = w[13] ⊕ w[14] = 259dce91

g(w[15]) = ?
	• w[15] as 'w'
	• rcon_4 = 0x80
	1) <-LShift w: 3de0b3f7
	2) SubSbox w: 27e16d68
	3) w * rcon_4
	27e16d68 ⊕ 0x80 = 2fe16d68
	g(w[15])] =  2fe16d68
w[16] = w[12] ⊕ g(w[15]) = 2fe16d68

w[17] = w[15] ⊕ w[16] = 68da9f31
w[18] = w[16] ⊕ w[17] = bc08100f
w[19] = w[17] ⊕ w[18] = 9995de9e

g(w[19]) = ?
	• w[19] as 'w'
	• rcon_5 = 0x10
	1) <-LShift w: a83e2d6e
	2) SubSbox w: c2b2d89f
	3) w * rcon_5
	c2b2d89f ⊕ 0x10 = d2b2d89f
	g(w[19])] =  d2b2d89f
w[20] = w[16] ⊕ g(w[19]) = d2b2d89f

w[21] = w[19] ⊕ w[20] = ba6847ae
w[22] = w[20] ⊕ w[21] = 066057a1
w[23] = w[21] ⊕ w[22] = 9ff5893f

g(w[23]) = ?
	• w[23] as 'w'
	• rcon_6 = 0x20
	1) <-LShift w: 5db712f1
	2) SubSbox w: 4ca9c9a1
	3) w * rcon_6
	4ca9c9a1 ⊕ 0x20 = 6ca9c9a1
	g(w[23])] =  6ca9c9a1
w[24] = w[20] ⊕ g(w[23]) = 6ca9c9a1

w[25] = w[23] ⊕ w[24] = d6c18e0f
w[26] = w[24] ⊕ w[25] = d0a1d9ae
w[27] = w[25] ⊕ w[26] = 4f545091

g(w[27]) = ?
	• w[27] as 'w'
	• rcon_7 = 0x40
	1) <-LShift w: 09e783be
	2) SubSbox w: 0194ecae
	3) w * rcon_7
	0194ecae ⊕ 0x40 = 4194ecae
	g(w[27])] =  4194ecae
w[28] = w[24] ⊕ g(w[27]) = 4194ecae

w[29] = w[27] ⊕ w[28] = 975562a1
w[30] = w[28] ⊕ w[29] = 47f4bb0f
w[31] = w[29] ⊕ w[30] = 08a0eb9e

g(w[31]) = ?
	• w[31] as 'w'
	• rcon_8 = 0x80
	1) <-LShift w: a90c1db6
	2) SubSbox w: d3fea44e
	3) w * rcon_8
	d3fea44e ⊕ 0x80 = 53fea44e
	g(w[31])] =  53fea44e
w[32] = w[28] ⊕ g(w[31]) = 53fea44e

w[33] = w[31] ⊕ w[32] = c4abc6ef
w[34] = w[32] ⊕ w[33] = 835f7de0
w[35] = w[33] ⊕ w[34] = 8bff967e

g(w[35]) = ?
	• w[35] as 'w'
	• rcon_9 = 0x1b
	1) <-LShift w: 569a633d
	2) SubSbox w: b1b8fb27
	3) w * rcon_9
	b1b8fb27 ⊕ 0x1b = aab8fb27
	g(w[35])] =  aab8fb27
w[36] = w[32] ⊕ g(w[35]) = aab8fb27

w[37] = w[35] ⊕ w[36] = 6e133dc8
w[38] = w[36] ⊕ w[37] = ed4c4028
w[39] = w[37] ⊕ w[38] = 66b3d656

g(w[39]) = ?
	• w[39] as 'w'
	• rcon_10 = 0x36
	1) <-LShift w: e54c355b
	2) SubSbox w: d9299639
	3) w * rcon_10
	d9299639 ⊕ 0x36 = ef299639
	g(w[39])] =  ef299639
w[40] = w[36] ⊕ g(w[39]) = ef299639

w[41] = w[39] ⊕ w[40] = 813aabf1
w[42] = w[40] ⊕ w[41] = 6c76ebd9
w[43] = w[41] ⊕ w[42] = 0ac53d8f

Keywords:
--------------------------------------------------------------------
w[0]:	444F5249
w[1]:	4E412041
w[2]:	52452043
w[3]:	41495345
w[4]:	7ea23cca
w[5]:	30e31c8b
w[6]:	62a63cc8
w[7]:	23ef6f8d
w[8]:	a30a61ec
w[9]:	93e97d67
w[10]:	f14f41af
w[11]:	d2a02e22
w[12]:	473bf259
w[13]:	d4d28f3e
w[14]:	259dce91
w[15]:	f73de0b3
w[16]:	68da9f31
w[17]:	bc08100f
w[18]:	9995de9e
w[19]:	6ea83e2d
w[20]:	ba6847ae
w[21]:	066057a1
w[22]:	9ff5893f
w[23]:	f15db712
w[24]:	d6c18e0f
w[25]:	d0a1d9ae
w[26]:	4f545091
w[27]:	be09e783
w[28]:	975562a1
w[29]:	47f4bb0f
w[30]:	08a0eb9e
w[31]:	b6a90c1d
w[32]:	c4abc6ef
w[33]:	835f7de0
w[34]:	8bff967e
w[35]:	3d569a63
w[36]:	6e133dc8
w[37]:	ed4c4028
w[38]:	66b3d656
w[39]:	5be54c35
w[40]:	813aabf1
w[41]:	6c76ebd9
w[42]:	0ac53d8f
w[43]:	512071ba

Rounded keys:
--------------------------------------------------------------------
Round_0:	 444F52494E4120415245204341495345
Round_1:	 7ea23cca30e31c8b62a63cc823ef6f8d
Round_2:	 a30a61ec93e97d67f14f41afd2a02e22
Round_3:	 473bf259d4d28f3e259dce91f73de0b3
Round_4:	 68da9f31bc08100f9995de9e6ea83e2d
Round_5:	 ba6847ae066057a19ff5893ff15db712
Round_6:	 d6c18e0fd0a1d9ae4f545091be09e783
Round_7:	 975562a147f4bb0f08a0eb9eb6a90c1d
Round_8:	 c4abc6ef835f7de08bff967e3d569a63
Round_9:	 6e133dc8ed4c402866b3d6565be54c35
Round_10:	 813aabf16c76ebd90ac53d8f512071ba

Round Keys State Matricies:
--------------------------------------------------------------------
RK_0: 444F52494E4120415245204341495345
RK_state = 
	44  4E  52  41  
	4F  41  45  49  
	52  20  20  53  
	49  41  43  45  

RK_1: 7ea23cca30e31c8b62a63cc823ef6f8d
RK_state = 
	7e  30  62  23  
	a2  e3  a6  ef  
	3c  1c  3c  6f  
	ca  8b  c8  8d  

RK_2: a30a61ec93e97d67f14f41afd2a02e22
RK_state = 
	a3  93  f1  d2  
	0a  e9  4f  a0  
	61  7d  41  2e  
	ec  67  af  22  

RK_3: 473bf259d4d28f3e259dce91f73de0b3
RK_state = 
	47  d4  25  f7  
	3b  d2  9d  3d  
	f2  8f  ce  e0  
	59  3e  91  b3  

RK_4: 68da9f31bc08100f9995de9e6ea83e2d
RK_state = 
	68  bc  99  6e  
	da  08  95  a8  
	9f  10  de  3e  
	31  0f  9e  2d  

RK_5: ba6847ae066057a19ff5893ff15db712
RK_state = 
	ba  06  9f  f1  
	68  60  f5  5d  
	47  57  89  b7  
	ae  a1  3f  12  

RK_6: d6c18e0fd0a1d9ae4f545091be09e783
RK_state = 
	d6  d0  4f  be  
	c1  a1  54  09  
	8e  d9  50  e7  
	0f  ae  91  83  

RK_7: 975562a147f4bb0f08a0eb9eb6a90c1d
RK_state = 
	97  47  08  b6  
	55  f4  a0  a9  
	62  bb  eb  0c  
	a1  0f  9e  1d  

RK_8: c4abc6ef835f7de08bff967e3d569a63
RK_state = 
	c4  83  8b  3d  
	ab  5f  ff  56  
	c6  7d  96  9a  
	ef  e0  7e  63  

RK_9: 6e133dc8ed4c402866b3d6565be54c35
RK_state = 
	6e  ed  66  5b  
	13  4c  b3  e5  
	3d  40  d6  4c  
	c8  28  56  35  

RK_10: 813aabf16c76ebd90ac53d8f512071ba
RK_state = 
	81  6c  0a  51  
	3a  76  c5  20  
	ab  eb  3d  71  
	f1  d9  8f  ba  

Add Round Keys:
--------------------------------------------------------------------
Add Roundkey Round 0 ===============================================
 state matrix: (plaintext as matrix)
54  56  52  45
45  49  55  20
4C  5A  4C  48
45  4F  20  44
 ⊕ RK_matrix[0]:
44  4E  52  41
4F  41  45  49
52  20  20  53
49  41  43  45
=======>state_matrix<=======
10  18  00  04
0a  08  10  69
1e  7a  6c  1b
0c  0e  63  01

Add Roundkey Round 1 ===============================================
 state_matrix:
10  18  00  04
0a  08  10  69
1e  7a  6c  1b
0c  0e  63  01
 1) Substitution S-box =>
ca  ad  63  f2
67  30  ca  f9
72  da  50  af
fe  ab  fb  7c
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
ca  ad  63  f2
30  ca  f9  67
50  af  72  da
7c  fe  ab  fb

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*202 = 10 * 11001010 = 10001111
(0,1)*(1,0) => (1) = (2*48)⊕48 = 1100000 ⊕ 110000 = 1010000
(0,2)*(2,0) => (2) = 1 * 1010000 = 1010000
(0,3)*(3,0) => (3) = 1 * 1111100 = 1111100

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  10001111⊕
  01010000⊕
  01010000⊕
  01111100
= 11110011 | 243 | f3

(0,0)*(0,1) => (0) = 2*173 = 10 * 10101101 = 1000001
(0,1)*(1,1) => (1) = (2*202)⊕202 = 110010100 ⊕ 11001010 = 1000101
(0,2)*(2,1) => (2) = 1 * 10101111 = 10101111
(0,3)*(3,1) => (3) = 1 * 11111110 = 11111110

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  01000001⊕
  01000101⊕
  10101111⊕
  11111110
= 01010101 | 85 | 55

(0,0)*(0,2) => (0) = 2*99 = 10 * 1100011 = 11000110
(0,1)*(1,2) => (1) = (2*249)⊕249 = 111110010 ⊕ 11111001 = 10000
(0,2)*(2,2) => (2) = 1 * 1110010 = 1110010
(0,3)*(3,2) => (3) = 1 * 10101011 = 10101011

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  11000110⊕
  00010000⊕
  01110010⊕
  10101011
= 00001111 | 15 | 0f

(0,0)*(0,3) => (0) = 2*242 = 10 * 11110010 = 11111111
(0,1)*(1,3) => (1) = (2*103)⊕103 = 11001110 ⊕ 1100111 = 10101001
(0,2)*(2,3) => (2) = 1 * 11011010 = 11011010
(0,3)*(3,3) => (3) = 1 * 11111011 = 11111011

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  11111111⊕
  10101001⊕
  11011010⊕
  11111011
= 01110111 | 119 | 77

(1,0)*(0,0) => (0) = 1 * 11001010 = 11001010
(1,1)*(1,0) => (1) = 2*48 = 10 * 110000 = 1100000
(1,2)*(2,0) => (2) = (2*80)⊕80 = 10100000 ⊕ 1010000 = 11110000
(1,3)*(3,0) => (3) = 1 * 1111100 = 1111100

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  11001010⊕
  01100000⊕
  11110000⊕
  01111100
= 00100110 | 38 | 26

(1,0)*(0,1) => (0) = 1 * 10101101 = 10101101
(1,1)*(1,1) => (1) = 2*202 = 10 * 11001010 = 10001111
(1,2)*(2,1) => (2) = (2*175)⊕175 = 101011110 ⊕ 10101111 = 11101010
(1,3)*(3,1) => (3) = 1 * 11111110 = 11111110

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  10101101⊕
  10001111⊕
  11101010⊕
  11111110
= 00110110 | 54 | 36

(1,0)*(0,2) => (0) = 1 * 1100011 = 1100011
(1,1)*(1,2) => (1) = 2*249 = 10 * 11111001 = 11101001
(1,2)*(2,2) => (2) = (2*114)⊕114 = 11100100 ⊕ 1110010 = 10010110
(1,3)*(3,2) => (3) = 1 * 10101011 = 10101011

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  01100011⊕
  11101001⊕
  10010110⊕
  10101011
= 10110111 | 183 | b7

(1,0)*(0,3) => (0) = 1 * 11110010 = 11110010
(1,1)*(1,3) => (1) = 2*103 = 10 * 1100111 = 11001110
(1,2)*(2,3) => (2) = (2*218)⊕218 = 110110100 ⊕ 11011010 = 1110101
(1,3)*(3,3) => (3) = 1 * 11111011 = 11111011

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  11110010⊕
  11001110⊕
  01110101⊕
  11111011
= 10110010 | 178 | b2

(2,0)*(0,0) => (0) = 1 * 11001010 = 11001010
(2,1)*(1,0) => (1) = 1 * 110000 = 110000
(2,2)*(2,0) => (2) = 2*80 = 10 * 1010000 = 10100000
(2,3)*(3,0) => (3) = (2*124)⊕124 = 11111000 ⊕ 1111100 = 10000100

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  11001010⊕
  00110000⊕
  10100000⊕
  10000100
= 11011110 | 222 | de

(2,0)*(0,1) => (0) = 1 * 10101101 = 10101101
(2,1)*(1,1) => (1) = 1 * 11001010 = 11001010
(2,2)*(2,1) => (2) = 2*175 = 10 * 10101111 = 1000101
(2,3)*(3,1) => (3) = (2*254)⊕254 = 111111100 ⊕ 11111110 = 11001

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  10101101⊕
  11001010⊕
  01000101⊕
  00011001
= 00111011 | 59 | 3b

(2,0)*(0,2) => (0) = 1 * 1100011 = 1100011
(2,1)*(1,2) => (1) = 1 * 11111001 = 11111001
(2,2)*(2,2) => (2) = 2*114 = 10 * 1110010 = 11100100
(2,3)*(3,2) => (3) = (2*171)⊕171 = 101010110 ⊕ 10101011 = 11100110

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  01100011⊕
  11111001⊕
  11100100⊕
  11100110
= 10011000 | 152 | 98

(2,0)*(0,3) => (0) = 1 * 11110010 = 11110010
(2,1)*(1,3) => (1) = 1 * 1100111 = 1100111
(2,2)*(2,3) => (2) = 2*218 = 10 * 11011010 = 10101111
(2,3)*(3,3) => (3) = (2*251)⊕251 = 111110110 ⊕ 11111011 = 10110

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  11110010⊕
  01100111⊕
  10101111⊕
  00010110
= 00101100 | 44 | 2c

(3,0)*(0,0) => (0) = (2*202)⊕202 = 110010100 ⊕ 11001010 = 1000101
(3,1)*(1,0) => (1) = 1 * 110000 = 110000
(3,2)*(2,0) => (2) = 1 * 1010000 = 1010000
(3,3)*(3,0) => (3) = 2*124 = 10 * 1111100 = 11111000

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  01000101⊕
  00110000⊕
  01010000⊕
  11111000
= 11011101 | 221 | dd

(3,0)*(0,1) => (0) = (2*173)⊕173 = 101011010 ⊕ 10101101 = 11101100
(3,1)*(1,1) => (1) = 1 * 11001010 = 11001010
(3,2)*(2,1) => (2) = 1 * 10101111 = 10101111
(3,3)*(3,1) => (3) = 2*254 = 10 * 11111110 = 11100111

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  11101100⊕
  11001010⊕
  10101111⊕
  11100111
= 01101110 | 110 | 6e

(3,0)*(0,2) => (0) = (2*99)⊕99 = 11000110 ⊕ 1100011 = 10100101
(3,1)*(1,2) => (1) = 1 * 11111001 = 11111001
(3,2)*(2,2) => (2) = 1 * 1110010 = 1110010
(3,3)*(3,2) => (3) = 2*171 = 10 * 10101011 = 1001101

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  10100101⊕
  11111001⊕
  01110010⊕
  01001101
= 01100011 | 99 | 63

(3,0)*(0,3) => (0) = (2*242)⊕242 = 111100100 ⊕ 11110010 = 1101
(3,1)*(1,3) => (1) = 1 * 1100111 = 1100111
(3,2)*(2,3) => (2) = 1 * 11011010 = 11011010
(3,3)*(3,3) => (3) = 2*251 = 10 * 11111011 = 11101101

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  00001101⊕
  01100111⊕
  11011010⊕
  11101101
= 01011101 | 93 | 5d

=======>state_matrix<=======
f3  55  0f  77
26  36  b7  b2
de  3b  98  2c
dd  6e  63  5d
 4) ⊕ RK_matrix[0]:
7e  30  62  23
a2  e3  a6  ef
3c  1c  3c  6f
ca  8b  c8  8d
=======>state_matrix<=======
8d  65  6d  54
84  d5  11  5d
e2  27  a4  43
17  e5  ab  d0
=======> CIPHERTEXT: 8d 84 e2 17 65 d5 27 e5 6d 11 a4 ab 54 5d 43 d0 

Add Roundkey Round 2 ===============================================
 state_matrix:
8d  65  6d  54
84  d5  11  5d
e2  27  a4  43
17  e5  ab  d0
 1) Substitution S-box =>
5d  4d  3c  20
5f  03  82  4c
98  cc  49  1a
f0  d9  62  70
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
5d  4d  3c  20
03  82  4c  5f
49  1a  98  cc
70  f0  d9  62

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*93 = 10 * 1011101 = 10111010
(0,1)*(1,0) => (1) = (2*3)⊕3 = 110 ⊕ 11 = 101
(0,2)*(2,0) => (2) = 1 * 1001001 = 1001001
(0,3)*(3,0) => (3) = 1 * 1110000 = 1110000

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  10111010⊕
  00000101⊕
  01001001⊕
  01110000
= 10000110 | 134 | 86

(0,0)*(0,1) => (0) = 2*77 = 10 * 1001101 = 10011010
(0,1)*(1,1) => (1) = (2*130)⊕130 = 100000100 ⊕ 10000010 = 10011101
(0,2)*(2,1) => (2) = 1 * 11010 = 11010
(0,3)*(3,1) => (3) = 1 * 11110000 = 11110000

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  10011010⊕
  10011101⊕
  00011010⊕
  11110000
= 11101101 | 237 | ed

(0,0)*(0,2) => (0) = 2*60 = 10 * 111100 = 1111000
(0,1)*(1,2) => (1) = (2*76)⊕76 = 10011000 ⊕ 1001100 = 11010100
(0,2)*(2,2) => (2) = 1 * 10011000 = 10011000
(0,3)*(3,2) => (3) = 1 * 11011001 = 11011001

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  01111000⊕
  11010100⊕
  10011000⊕
  11011001
= 11101101 | 237 | ed

(0,0)*(0,3) => (0) = 2*32 = 10 * 100000 = 1000000
(0,1)*(1,3) => (1) = (2*95)⊕95 = 10111110 ⊕ 1011111 = 11100001
(0,2)*(2,3) => (2) = 1 * 11001100 = 11001100
(0,3)*(3,3) => (3) = 1 * 1100010 = 1100010

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  01000000⊕
  11100001⊕
  11001100⊕
  01100010
= 00001111 | 15 | 0f

(1,0)*(0,0) => (0) = 1 * 1011101 = 1011101
(1,1)*(1,0) => (1) = 2*3 = 10 * 11 = 110
(1,2)*(2,0) => (2) = (2*73)⊕73 = 10010010 ⊕ 1001001 = 11011011
(1,3)*(3,0) => (3) = 1 * 1110000 = 1110000

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  01011101⊕
  00000110⊕
  11011011⊕
  01110000
= 11110000 | 240 | f0

(1,0)*(0,1) => (0) = 1 * 1001101 = 1001101
(1,1)*(1,1) => (1) = 2*130 = 10 * 10000010 = 11111
(1,2)*(2,1) => (2) = (2*26)⊕26 = 110100 ⊕ 11010 = 101110
(1,3)*(3,1) => (3) = 1 * 11110000 = 11110000

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  01001101⊕
  00011111⊕
  00101110⊕
  11110000
= 10001100 | 140 | 8c

(1,0)*(0,2) => (0) = 1 * 111100 = 111100
(1,1)*(1,2) => (1) = 2*76 = 10 * 1001100 = 10011000
(1,2)*(2,2) => (2) = (2*152)⊕152 = 100110000 ⊕ 10011000 = 10110011
(1,3)*(3,2) => (3) = 1 * 11011001 = 11011001

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  00111100⊕
  10011000⊕
  10110011⊕
  11011001
= 11001110 | 206 | ce

(1,0)*(0,3) => (0) = 1 * 100000 = 100000
(1,1)*(1,3) => (1) = 2*95 = 10 * 1011111 = 10111110
(1,2)*(2,3) => (2) = (2*204)⊕204 = 110011000 ⊕ 11001100 = 1001111
(1,3)*(3,3) => (3) = 1 * 1100010 = 1100010

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  00100000⊕
  10111110⊕
  01001111⊕
  01100010
= 10110011 | 179 | b3

(2,0)*(0,0) => (0) = 1 * 1011101 = 1011101
(2,1)*(1,0) => (1) = 1 * 11 = 11
(2,2)*(2,0) => (2) = 2*73 = 10 * 1001001 = 10010010
(2,3)*(3,0) => (3) = (2*112)⊕112 = 11100000 ⊕ 1110000 = 10010000

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  01011101⊕
  00000011⊕
  10010010⊕
  10010000
= 01011100 | 92 | 5c

(2,0)*(0,1) => (0) = 1 * 1001101 = 1001101
(2,1)*(1,1) => (1) = 1 * 10000010 = 10000010
(2,2)*(2,1) => (2) = 2*26 = 10 * 11010 = 110100
(2,3)*(3,1) => (3) = (2*240)⊕240 = 111100000 ⊕ 11110000 = 1011

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  01001101⊕
  10000010⊕
  00110100⊕
  00001011
= 11110000 | 240 | f0

(2,0)*(0,2) => (0) = 1 * 111100 = 111100
(2,1)*(1,2) => (1) = 1 * 1001100 = 1001100
(2,2)*(2,2) => (2) = 2*152 = 10 * 10011000 = 101011
(2,3)*(3,2) => (3) = (2*217)⊕217 = 110110010 ⊕ 11011001 = 1110000

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  00111100⊕
  01001100⊕
  00101011⊕
  01110000
= 00101011 | 43 | 2b

(2,0)*(0,3) => (0) = 1 * 100000 = 100000
(2,1)*(1,3) => (1) = 1 * 1011111 = 1011111
(2,2)*(2,3) => (2) = 2*204 = 10 * 11001100 = 10000011
(2,3)*(3,3) => (3) = (2*98)⊕98 = 11000100 ⊕ 1100010 = 10100110

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  00100000⊕
  01011111⊕
  10000011⊕
  10100110
= 01011010 | 90 | 5a

(3,0)*(0,0) => (0) = (2*93)⊕93 = 10111010 ⊕ 1011101 = 11100111
(3,1)*(1,0) => (1) = 1 * 11 = 11
(3,2)*(2,0) => (2) = 1 * 1001001 = 1001001
(3,3)*(3,0) => (3) = 2*112 = 10 * 1110000 = 11100000

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  11100111⊕
  00000011⊕
  01001001⊕
  11100000
= 01001101 | 77 | 4d

(3,0)*(0,1) => (0) = (2*77)⊕77 = 10011010 ⊕ 1001101 = 11010111
(3,1)*(1,1) => (1) = 1 * 10000010 = 10000010
(3,2)*(2,1) => (2) = 1 * 11010 = 11010
(3,3)*(3,1) => (3) = 2*240 = 10 * 11110000 = 11111011

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  11010111⊕
  10000010⊕
  00011010⊕
  11111011
= 10110100 | 180 | b4

(3,0)*(0,2) => (0) = (2*60)⊕60 = 1111000 ⊕ 111100 = 1000100
(3,1)*(1,2) => (1) = 1 * 1001100 = 1001100
(3,2)*(2,2) => (2) = 1 * 10011000 = 10011000
(3,3)*(3,2) => (3) = 2*217 = 10 * 11011001 = 10101001

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  01000100⊕
  01001100⊕
  10011000⊕
  10101001
= 00111001 | 57 | 39

(3,0)*(0,3) => (0) = (2*32)⊕32 = 1000000 ⊕ 100000 = 1100000
(3,1)*(1,3) => (1) = 1 * 1011111 = 1011111
(3,2)*(2,3) => (2) = 1 * 11001100 = 11001100
(3,3)*(3,3) => (3) = 2*98 = 10 * 1100010 = 11000100

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  01100000⊕
  01011111⊕
  11001100⊕
  11000100
= 00110111 | 55 | 37

=======>state_matrix<=======
86  ed  ed  0f
f0  8c  ce  b3
5c  f0  2b  5a
4d  b4  39  37
 4) ⊕ RK_matrix[0]:
a3  93  f1  d2
0a  e9  4f  a0
61  7d  41  2e
ec  67  af  22
=======>state_matrix<=======
25  7e  1c  dd
fa  65  81  13
3d  8d  6a  74
a1  d3  96  15
=======> CIPHERTEXT: 25 fa 3d a1 7e 65 8d d3 1c 81 6a 96 dd 13 74 15 

Add Roundkey Round 3 ===============================================
 state_matrix:
25  7e  1c  dd
fa  65  81  13
3d  8d  6a  74
a1  d3  96  15
 1) Substitution S-box =>
3f  f3  9c  c1
2d  4d  0c  7d
27  5d  02  92
32  66  90  59
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
3f  f3  9c  c1
4d  0c  7d  2d
02  92  27  5d
59  32  66  90

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*63 = 10 * 111111 = 1111110
(0,1)*(1,0) => (1) = (2*77)⊕77 = 10011010 ⊕ 1001101 = 11010111
(0,2)*(2,0) => (2) = 1 * 10 = 10
(0,3)*(3,0) => (3) = 1 * 1011001 = 1011001

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  01111110⊕
  11010111⊕
  00000010⊕
  01011001
= 11110010 | 242 | f2

(0,0)*(0,1) => (0) = 2*243 = 10 * 11110011 = 11111101
(0,1)*(1,1) => (1) = (2*12)⊕12 = 11000 ⊕ 1100 = 10100
(0,2)*(2,1) => (2) = 1 * 10010010 = 10010010
(0,3)*(3,1) => (3) = 1 * 110010 = 110010

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  11111101⊕
  00010100⊕
  10010010⊕
  00110010
= 01001001 | 73 | 49

(0,0)*(0,2) => (0) = 2*156 = 10 * 10011100 = 100011
(0,1)*(1,2) => (1) = (2*125)⊕125 = 11111010 ⊕ 1111101 = 10000111
(0,2)*(2,2) => (2) = 1 * 100111 = 100111
(0,3)*(3,2) => (3) = 1 * 1100110 = 1100110

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  00100011⊕
  10000111⊕
  00100111⊕
  01100110
= 11100101 | 229 | e5

(0,0)*(0,3) => (0) = 2*193 = 10 * 11000001 = 10011001
(0,1)*(1,3) => (1) = (2*45)⊕45 = 1011010 ⊕ 101101 = 1110111
(0,2)*(2,3) => (2) = 1 * 1011101 = 1011101
(0,3)*(3,3) => (3) = 1 * 10010000 = 10010000

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  10011001⊕
  01110111⊕
  01011101⊕
  10010000
= 00100011 | 35 | 23

(1,0)*(0,0) => (0) = 1 * 111111 = 111111
(1,1)*(1,0) => (1) = 2*77 = 10 * 1001101 = 10011010
(1,2)*(2,0) => (2) = (2*2)⊕2 = 100 ⊕ 10 = 110
(1,3)*(3,0) => (3) = 1 * 1011001 = 1011001

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  00111111⊕
  10011010⊕
  00000110⊕
  01011001
= 11111010 | 250 | fa

(1,0)*(0,1) => (0) = 1 * 11110011 = 11110011
(1,1)*(1,1) => (1) = 2*12 = 10 * 1100 = 11000
(1,2)*(2,1) => (2) = (2*146)⊕146 = 100100100 ⊕ 10010010 = 10101101
(1,3)*(3,1) => (3) = 1 * 110010 = 110010

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  11110011⊕
  00011000⊕
  10101101⊕
  00110010
= 01110100 | 116 | 74

(1,0)*(0,2) => (0) = 1 * 10011100 = 10011100
(1,1)*(1,2) => (1) = 2*125 = 10 * 1111101 = 11111010
(1,2)*(2,2) => (2) = (2*39)⊕39 = 1001110 ⊕ 100111 = 1101001
(1,3)*(3,2) => (3) = 1 * 1100110 = 1100110

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  10011100⊕
  11111010⊕
  01101001⊕
  01100110
= 01101001 | 105 | 69

(1,0)*(0,3) => (0) = 1 * 11000001 = 11000001
(1,1)*(1,3) => (1) = 2*45 = 10 * 101101 = 1011010
(1,2)*(2,3) => (2) = (2*93)⊕93 = 10111010 ⊕ 1011101 = 11100111
(1,3)*(3,3) => (3) = 1 * 10010000 = 10010000

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  11000001⊕
  01011010⊕
  11100111⊕
  10010000
= 11101100 | 236 | ec

(2,0)*(0,0) => (0) = 1 * 111111 = 111111
(2,1)*(1,0) => (1) = 1 * 1001101 = 1001101
(2,2)*(2,0) => (2) = 2*2 = 10 * 10 = 100
(2,3)*(3,0) => (3) = (2*89)⊕89 = 10110010 ⊕ 1011001 = 11101011

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  00111111⊕
  01001101⊕
  00000100⊕
  11101011
= 10011101 | 157 | 9d

(2,0)*(0,1) => (0) = 1 * 11110011 = 11110011
(2,1)*(1,1) => (1) = 1 * 1100 = 1100
(2,2)*(2,1) => (2) = 2*146 = 10 * 10010010 = 111111
(2,3)*(3,1) => (3) = (2*50)⊕50 = 1100100 ⊕ 110010 = 1010110

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  11110011⊕
  00001100⊕
  00111111⊕
  01010110
= 10010110 | 150 | 96

(2,0)*(0,2) => (0) = 1 * 10011100 = 10011100
(2,1)*(1,2) => (1) = 1 * 1111101 = 1111101
(2,2)*(2,2) => (2) = 2*39 = 10 * 100111 = 1001110
(2,3)*(3,2) => (3) = (2*102)⊕102 = 11001100 ⊕ 1100110 = 10101010

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  10011100⊕
  01111101⊕
  01001110⊕
  10101010
= 00000101 | 5 | 05

(2,0)*(0,3) => (0) = 1 * 11000001 = 11000001
(2,1)*(1,3) => (1) = 1 * 101101 = 101101
(2,2)*(2,3) => (2) = 2*93 = 10 * 1011101 = 10111010
(2,3)*(3,3) => (3) = (2*144)⊕144 = 100100000 ⊕ 10010000 = 10101011

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  11000001⊕
  00101101⊕
  10111010⊕
  10101011
= 11111101 | 253 | fd

(3,0)*(0,0) => (0) = (2*63)⊕63 = 1111110 ⊕ 111111 = 1000001
(3,1)*(1,0) => (1) = 1 * 1001101 = 1001101
(3,2)*(2,0) => (2) = 1 * 10 = 10
(3,3)*(3,0) => (3) = 2*89 = 10 * 1011001 = 10110010

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  01000001⊕
  01001101⊕
  00000010⊕
  10110010
= 10111100 | 188 | bc

(3,0)*(0,1) => (0) = (2*243)⊕243 = 111100110 ⊕ 11110011 = 1110
(3,1)*(1,1) => (1) = 1 * 1100 = 1100
(3,2)*(2,1) => (2) = 1 * 10010010 = 10010010
(3,3)*(3,1) => (3) = 2*50 = 10 * 110010 = 1100100

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  00001110⊕
  00001100⊕
  10010010⊕
  01100100
= 11110100 | 244 | f4

(3,0)*(0,2) => (0) = (2*156)⊕156 = 100111000 ⊕ 10011100 = 10111111
(3,1)*(1,2) => (1) = 1 * 1111101 = 1111101
(3,2)*(2,2) => (2) = 1 * 100111 = 100111
(3,3)*(3,2) => (3) = 2*102 = 10 * 1100110 = 11001100

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  10111111⊕
  01111101⊕
  00100111⊕
  11001100
= 00101001 | 41 | 29

(3,0)*(0,3) => (0) = (2*193)⊕193 = 110000010 ⊕ 11000001 = 1011000
(3,1)*(1,3) => (1) = 1 * 101101 = 101101
(3,2)*(2,3) => (2) = 1 * 1011101 = 1011101
(3,3)*(3,3) => (3) = 2*144 = 10 * 10010000 = 111011

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  01011000⊕
  00101101⊕
  01011101⊕
  00111011
= 00010011 | 19 | 13

=======>state_matrix<=======
f2  49  e5  23
fa  74  69  ec
9d  96  05  fd
bc  f4  29  13
 4) ⊕ RK_matrix[0]:
47  d4  25  f7
3b  d2  9d  3d
f2  8f  ce  e0
59  3e  91  b3
=======>state_matrix<=======
b5  9d  c0  d4
c1  a6  f4  d1
6f  19  cb  1d
e5  ca  b8  a0
=======> CIPHERTEXT: b5 c1 6f e5 9d a6 19 ca c0 f4 cb b8 d4 d1 1d a0 

Add Roundkey Round 4 ===============================================
 state_matrix:
b5  9d  c0  d4
c1  a6  f4  d1
6f  19  cb  1d
e5  ca  b8  a0
 1) Substitution S-box =>
d5  5e  ba  48
78  24  bf  3e
a8  d4  1f  a4
d9  74  6c  e0
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
d5  5e  ba  48
24  bf  3e  78
1f  a4  a8  d4
e0  d9  74  6c

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*213 = 10 * 11010101 = 10110001
(0,1)*(1,0) => (1) = (2*36)⊕36 = 1001000 ⊕ 100100 = 1101100
(0,2)*(2,0) => (2) = 1 * 11111 = 11111
(0,3)*(3,0) => (3) = 1 * 11100000 = 11100000

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  10110001⊕
  01101100⊕
  00011111⊕
  11100000
= 00100010 | 34 | 22

(0,0)*(0,1) => (0) = 2*94 = 10 * 1011110 = 10111100
(0,1)*(1,1) => (1) = (2*191)⊕191 = 101111110 ⊕ 10111111 = 11011010
(0,2)*(2,1) => (2) = 1 * 10100100 = 10100100
(0,3)*(3,1) => (3) = 1 * 11011001 = 11011001

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  10111100⊕
  11011010⊕
  10100100⊕
  11011001
= 00011011 | 27 | 1b

(0,0)*(0,2) => (0) = 2*186 = 10 * 10111010 = 1101111
(0,1)*(1,2) => (1) = (2*62)⊕62 = 1111100 ⊕ 111110 = 1000010
(0,2)*(2,2) => (2) = 1 * 10101000 = 10101000
(0,3)*(3,2) => (3) = 1 * 1110100 = 1110100

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  01101111⊕
  01000010⊕
  10101000⊕
  01110100
= 11110001 | 241 | f1

(0,0)*(0,3) => (0) = 2*72 = 10 * 1001000 = 10010000
(0,1)*(1,3) => (1) = (2*120)⊕120 = 11110000 ⊕ 1111000 = 10001000
(0,2)*(2,3) => (2) = 1 * 11010100 = 11010100
(0,3)*(3,3) => (3) = 1 * 1101100 = 1101100

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  10010000⊕
  10001000⊕
  11010100⊕
  01101100
= 10100000 | 160 | a0

(1,0)*(0,0) => (0) = 1 * 11010101 = 11010101
(1,1)*(1,0) => (1) = 2*36 = 10 * 100100 = 1001000
(1,2)*(2,0) => (2) = (2*31)⊕31 = 111110 ⊕ 11111 = 100001
(1,3)*(3,0) => (3) = 1 * 11100000 = 11100000

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  11010101⊕
  01001000⊕
  00100001⊕
  11100000
= 01011100 | 92 | 5c

(1,0)*(0,1) => (0) = 1 * 1011110 = 1011110
(1,1)*(1,1) => (1) = 2*191 = 10 * 10111111 = 1100101
(1,2)*(2,1) => (2) = (2*164)⊕164 = 101001000 ⊕ 10100100 = 11110111
(1,3)*(3,1) => (3) = 1 * 11011001 = 11011001

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  01011110⊕
  01100101⊕
  11110111⊕
  11011001
= 00010101 | 21 | 15

(1,0)*(0,2) => (0) = 1 * 10111010 = 10111010
(1,1)*(1,2) => (1) = 2*62 = 10 * 111110 = 1111100
(1,2)*(2,2) => (2) = (2*168)⊕168 = 101010000 ⊕ 10101000 = 11100011
(1,3)*(3,2) => (3) = 1 * 1110100 = 1110100

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  10111010⊕
  01111100⊕
  11100011⊕
  01110100
= 01010001 | 81 | 51

(1,0)*(0,3) => (0) = 1 * 1001000 = 1001000
(1,1)*(1,3) => (1) = 2*120 = 10 * 1111000 = 11110000
(1,2)*(2,3) => (2) = (2*212)⊕212 = 110101000 ⊕ 11010100 = 1100111
(1,3)*(3,3) => (3) = 1 * 1101100 = 1101100

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  01001000⊕
  11110000⊕
  01100111⊕
  01101100
= 10110011 | 179 | b3

(2,0)*(0,0) => (0) = 1 * 11010101 = 11010101
(2,1)*(1,0) => (1) = 1 * 100100 = 100100
(2,2)*(2,0) => (2) = 2*31 = 10 * 11111 = 111110
(2,3)*(3,0) => (3) = (2*224)⊕224 = 111000000 ⊕ 11100000 = 111011

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  11010101⊕
  00100100⊕
  00111110⊕
  00111011
= 11110100 | 244 | f4

(2,0)*(0,1) => (0) = 1 * 1011110 = 1011110
(2,1)*(1,1) => (1) = 1 * 10111111 = 10111111
(2,2)*(2,1) => (2) = 2*164 = 10 * 10100100 = 1010011
(2,3)*(3,1) => (3) = (2*217)⊕217 = 110110010 ⊕ 11011001 = 1110000

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  01011110⊕
  10111111⊕
  01010011⊕
  01110000
= 11000010 | 194 | c2

(2,0)*(0,2) => (0) = 1 * 10111010 = 10111010
(2,1)*(1,2) => (1) = 1 * 111110 = 111110
(2,2)*(2,2) => (2) = 2*168 = 10 * 10101000 = 1001011
(2,3)*(3,2) => (3) = (2*116)⊕116 = 11101000 ⊕ 1110100 = 10011100

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  10111010⊕
  00111110⊕
  01001011⊕
  10011100
= 01010011 | 83 | 53

(2,0)*(0,3) => (0) = 1 * 1001000 = 1001000
(2,1)*(1,3) => (1) = 1 * 1111000 = 1111000
(2,2)*(2,3) => (2) = 2*212 = 10 * 11010100 = 10110011
(2,3)*(3,3) => (3) = (2*108)⊕108 = 11011000 ⊕ 1101100 = 10110100

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  01001000⊕
  01111000⊕
  10110011⊕
  10110100
= 00110111 | 55 | 37

(3,0)*(0,0) => (0) = (2*213)⊕213 = 110101010 ⊕ 11010101 = 1100100
(3,1)*(1,0) => (1) = 1 * 100100 = 100100
(3,2)*(2,0) => (2) = 1 * 11111 = 11111
(3,3)*(3,0) => (3) = 2*224 = 10 * 11100000 = 11011011

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  01100100⊕
  00100100⊕
  00011111⊕
  11011011
= 10000100 | 132 | 84

(3,0)*(0,1) => (0) = (2*94)⊕94 = 10111100 ⊕ 1011110 = 11100010
(3,1)*(1,1) => (1) = 1 * 10111111 = 10111111
(3,2)*(2,1) => (2) = 1 * 10100100 = 10100100
(3,3)*(3,1) => (3) = 2*217 = 10 * 11011001 = 10101001

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  11100010⊕
  10111111⊕
  10100100⊕
  10101001
= 01010000 | 80 | 50

(3,0)*(0,2) => (0) = (2*186)⊕186 = 101110100 ⊕ 10111010 = 11010101
(3,1)*(1,2) => (1) = 1 * 111110 = 111110
(3,2)*(2,2) => (2) = 1 * 10101000 = 10101000
(3,3)*(3,2) => (3) = 2*116 = 10 * 1110100 = 11101000

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  11010101⊕
  00111110⊕
  10101000⊕
  11101000
= 10101011 | 171 | ab

(3,0)*(0,3) => (0) = (2*72)⊕72 = 10010000 ⊕ 1001000 = 11011000
(3,1)*(1,3) => (1) = 1 * 1111000 = 1111000
(3,2)*(2,3) => (2) = 1 * 11010100 = 11010100
(3,3)*(3,3) => (3) = 2*108 = 10 * 1101100 = 11011000

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  11011000⊕
  01111000⊕
  11010100⊕
  11011000
= 10101100 | 172 | ac

=======>state_matrix<=======
22  1b  f1  a0
5c  15  51  b3
f4  c2  53  37
84  50  ab  ac
 4) ⊕ RK_matrix[0]:
68  bc  99  6e
da  08  95  a8
9f  10  de  3e
31  0f  9e  2d
=======>state_matrix<=======
4a  a7  68  ce
86  1d  c4  1b
6b  d2  8d  09
b5  5f  35  81
=======> CIPHERTEXT: 4a 86 6b b5 a7 1d d2 5f 68 c4 8d 35 ce 1b 09 81 

Add Roundkey Round 5 ===============================================
 state_matrix:
4a  a7  68  ce
86  1d  c4  1b
6b  d2  8d  09
b5  5f  35  81
 1) Substitution S-box =>
d6  5c  45  8b
44  a4  1c  af
7f  b5  5d  01
d5  cf  96  0c
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
d6  5c  45  8b
a4  1c  af  44
5d  01  7f  b5
0c  d5  cf  96

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*214 = 10 * 11010110 = 10110111
(0,1)*(1,0) => (1) = (2*164)⊕164 = 101001000 ⊕ 10100100 = 11110111
(0,2)*(2,0) => (2) = 1 * 1011101 = 1011101
(0,3)*(3,0) => (3) = 1 * 1100 = 1100

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  10110111⊕
  11110111⊕
  01011101⊕
  00001100
= 00010001 | 17 | 11

(0,0)*(0,1) => (0) = 2*92 = 10 * 1011100 = 10111000
(0,1)*(1,1) => (1) = (2*28)⊕28 = 111000 ⊕ 11100 = 100100
(0,2)*(2,1) => (2) = 1 * 1 = 1
(0,3)*(3,1) => (3) = 1 * 11010101 = 11010101

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  10111000⊕
  00100100⊕
  00000001⊕
  11010101
= 01001000 | 72 | 48

(0,0)*(0,2) => (0) = 2*69 = 10 * 1000101 = 10001010
(0,1)*(1,2) => (1) = (2*175)⊕175 = 101011110 ⊕ 10101111 = 11101010
(0,2)*(2,2) => (2) = 1 * 1111111 = 1111111
(0,3)*(3,2) => (3) = 1 * 11001111 = 11001111

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  10001010⊕
  11101010⊕
  01111111⊕
  11001111
= 11010000 | 208 | d0

(0,0)*(0,3) => (0) = 2*139 = 10 * 10001011 = 1101
(0,1)*(1,3) => (1) = (2*68)⊕68 = 10001000 ⊕ 1000100 = 11001100
(0,2)*(2,3) => (2) = 1 * 10110101 = 10110101
(0,3)*(3,3) => (3) = 1 * 10010110 = 10010110

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  00001101⊕
  11001100⊕
  10110101⊕
  10010110
= 11100010 | 226 | e2

(1,0)*(0,0) => (0) = 1 * 11010110 = 11010110
(1,1)*(1,0) => (1) = 2*164 = 10 * 10100100 = 1010011
(1,2)*(2,0) => (2) = (2*93)⊕93 = 10111010 ⊕ 1011101 = 11100111
(1,3)*(3,0) => (3) = 1 * 1100 = 1100

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  11010110⊕
  01010011⊕
  11100111⊕
  00001100
= 01101110 | 110 | 6e

(1,0)*(0,1) => (0) = 1 * 1011100 = 1011100
(1,1)*(1,1) => (1) = 2*28 = 10 * 11100 = 111000
(1,2)*(2,1) => (2) = (2*1)⊕1 = 10 ⊕ 1 = 11
(1,3)*(3,1) => (3) = 1 * 11010101 = 11010101

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  01011100⊕
  00111000⊕
  00000011⊕
  11010101
= 10110010 | 178 | b2

(1,0)*(0,2) => (0) = 1 * 1000101 = 1000101
(1,1)*(1,2) => (1) = 2*175 = 10 * 10101111 = 1000101
(1,2)*(2,2) => (2) = (2*127)⊕127 = 11111110 ⊕ 1111111 = 10000001
(1,3)*(3,2) => (3) = 1 * 11001111 = 11001111

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  01000101⊕
  01000101⊕
  10000001⊕
  11001111
= 01001110 | 78 | 4e

(1,0)*(0,3) => (0) = 1 * 10001011 = 10001011
(1,1)*(1,3) => (1) = 2*68 = 10 * 1000100 = 10001000
(1,2)*(2,3) => (2) = (2*181)⊕181 = 101101010 ⊕ 10110101 = 11000100
(1,3)*(3,3) => (3) = 1 * 10010110 = 10010110

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  10001011⊕
  10001000⊕
  11000100⊕
  10010110
= 01010001 | 81 | 51

(2,0)*(0,0) => (0) = 1 * 11010110 = 11010110
(2,1)*(1,0) => (1) = 1 * 10100100 = 10100100
(2,2)*(2,0) => (2) = 2*93 = 10 * 1011101 = 10111010
(2,3)*(3,0) => (3) = (2*12)⊕12 = 11000 ⊕ 1100 = 10100

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  11010110⊕
  10100100⊕
  10111010⊕
  00010100
= 11011100 | 220 | dc

(2,0)*(0,1) => (0) = 1 * 1011100 = 1011100
(2,1)*(1,1) => (1) = 1 * 11100 = 11100
(2,2)*(2,1) => (2) = 2*1 = 10 * 1 = 10
(2,3)*(3,1) => (3) = (2*213)⊕213 = 110101010 ⊕ 11010101 = 1100100

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  01011100⊕
  00011100⊕
  00000010⊕
  01100100
= 00100110 | 38 | 26

(2,0)*(0,2) => (0) = 1 * 1000101 = 1000101
(2,1)*(1,2) => (1) = 1 * 10101111 = 10101111
(2,2)*(2,2) => (2) = 2*127 = 10 * 1111111 = 11111110
(2,3)*(3,2) => (3) = (2*207)⊕207 = 110011110 ⊕ 11001111 = 1001010

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  01000101⊕
  10101111⊕
  11111110⊕
  01001010
= 01011110 | 94 | 5e

(2,0)*(0,3) => (0) = 1 * 10001011 = 10001011
(2,1)*(1,3) => (1) = 1 * 1000100 = 1000100
(2,2)*(2,3) => (2) = 2*181 = 10 * 10110101 = 1110001
(2,3)*(3,3) => (3) = (2*150)⊕150 = 100101100 ⊕ 10010110 = 10100001

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  10001011⊕
  01000100⊕
  01110001⊕
  10100001
= 00011111 | 31 | 1f

(3,0)*(0,0) => (0) = (2*214)⊕214 = 110101100 ⊕ 11010110 = 1100001
(3,1)*(1,0) => (1) = 1 * 10100100 = 10100100
(3,2)*(2,0) => (2) = 1 * 1011101 = 1011101
(3,3)*(3,0) => (3) = 2*12 = 10 * 1100 = 11000

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  01100001⊕
  10100100⊕
  01011101⊕
  00011000
= 10000000 | 128 | 80

(3,0)*(0,1) => (0) = (2*92)⊕92 = 10111000 ⊕ 1011100 = 11100100
(3,1)*(1,1) => (1) = 1 * 11100 = 11100
(3,2)*(2,1) => (2) = 1 * 1 = 1
(3,3)*(3,1) => (3) = 2*213 = 10 * 11010101 = 10110001

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  11100100⊕
  00011100⊕
  00000001⊕
  10110001
= 01001000 | 72 | 48

(3,0)*(0,2) => (0) = (2*69)⊕69 = 10001010 ⊕ 1000101 = 11001111
(3,1)*(1,2) => (1) = 1 * 10101111 = 10101111
(3,2)*(2,2) => (2) = 1 * 1111111 = 1111111
(3,3)*(3,2) => (3) = 2*207 = 10 * 11001111 = 10000101

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  11001111⊕
  10101111⊕
  01111111⊕
  10000101
= 10011010 | 154 | 9a

(3,0)*(0,3) => (0) = (2*139)⊕139 = 100010110 ⊕ 10001011 = 10000110
(3,1)*(1,3) => (1) = 1 * 1000100 = 1000100
(3,2)*(2,3) => (2) = 1 * 10110101 = 10110101
(3,3)*(3,3) => (3) = 2*150 = 10 * 10010110 = 110111

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  10000110⊕
  01000100⊕
  10110101⊕
  00110111
= 01000000 | 64 | 40

=======>state_matrix<=======
11  48  d0  e2
6e  b2  4e  51
dc  26  5e  1f
80  48  9a  40
 4) ⊕ RK_matrix[0]:
ba  06  9f  f1
68  60  f5  5d
47  57  89  b7
ae  a1  3f  12
=======>state_matrix<=======
ab  4e  4f  13
06  d2  bb  0c
9b  71  d7  a8
2e  e9  a5  52
=======> CIPHERTEXT: ab 06 9b 2e 4e d2 71 e9 4f bb d7 a5 13 0c a8 52 

Add Roundkey Round 6 ===============================================
 state_matrix:
ab  4e  4f  13
06  d2  bb  0c
9b  71  d7  a8
2e  e9  a5  52
 1) Substitution S-box =>
62  2f  84  7d
6f  b5  ea  fe
14  a3  0e  c2
31  1e  06  00
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
62  2f  84  7d
b5  ea  fe  6f
0e  c2  14  a3
00  31  1e  06

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*98 = 10 * 1100010 = 11000100
(0,1)*(1,0) => (1) = (2*181)⊕181 = 101101010 ⊕ 10110101 = 11000100
(0,2)*(2,0) => (2) = 1 * 1110 = 1110
(0,3)*(3,0) => (3) = 1 * 0 = 0

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  11000100⊕
  11000100⊕
  00001110⊕
  00000000
= 00001110 | 14 | 0e

(0,0)*(0,1) => (0) = 2*47 = 10 * 101111 = 1011110
(0,1)*(1,1) => (1) = (2*234)⊕234 = 111010100 ⊕ 11101010 = 100101
(0,2)*(2,1) => (2) = 1 * 11000010 = 11000010
(0,3)*(3,1) => (3) = 1 * 110001 = 110001

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  01011110⊕
  00100101⊕
  11000010⊕
  00110001
= 10001000 | 136 | 88

(0,0)*(0,2) => (0) = 2*132 = 10 * 10000100 = 10011
(0,1)*(1,2) => (1) = (2*254)⊕254 = 111111100 ⊕ 11111110 = 11001
(0,2)*(2,2) => (2) = 1 * 10100 = 10100
(0,3)*(3,2) => (3) = 1 * 11110 = 11110

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  00010011⊕
  00011001⊕
  00010100⊕
  00011110
= 00000000 | 0 | 00

(0,0)*(0,3) => (0) = 2*125 = 10 * 1111101 = 11111010
(0,1)*(1,3) => (1) = (2*111)⊕111 = 11011110 ⊕ 1101111 = 10110001
(0,2)*(2,3) => (2) = 1 * 10100011 = 10100011
(0,3)*(3,3) => (3) = 1 * 110 = 110

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  11111010⊕
  10110001⊕
  10100011⊕
  00000110
= 11101110 | 238 | ee

(1,0)*(0,0) => (0) = 1 * 1100010 = 1100010
(1,1)*(1,0) => (1) = 2*181 = 10 * 10110101 = 1110001
(1,2)*(2,0) => (2) = (2*14)⊕14 = 11100 ⊕ 1110 = 10010
(1,3)*(3,0) => (3) = 1 * 0 = 0

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  01100010⊕
  01110001⊕
  00010010⊕
  00000000
= 00000001 | 1 | 01

(1,0)*(0,1) => (0) = 1 * 101111 = 101111
(1,1)*(1,1) => (1) = 2*234 = 10 * 11101010 = 11001111
(1,2)*(2,1) => (2) = (2*194)⊕194 = 110000100 ⊕ 11000010 = 1011101
(1,3)*(3,1) => (3) = 1 * 110001 = 110001

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  00101111⊕
  11001111⊕
  01011101⊕
  00110001
= 10001100 | 140 | 8c

(1,0)*(0,2) => (0) = 1 * 10000100 = 10000100
(1,1)*(1,2) => (1) = 2*254 = 10 * 11111110 = 11100111
(1,2)*(2,2) => (2) = (2*20)⊕20 = 101000 ⊕ 10100 = 111100
(1,3)*(3,2) => (3) = 1 * 11110 = 11110

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  10000100⊕
  11100111⊕
  00111100⊕
  00011110
= 01000001 | 65 | 41

(1,0)*(0,3) => (0) = 1 * 1111101 = 1111101
(1,1)*(1,3) => (1) = 2*111 = 10 * 1101111 = 11011110
(1,2)*(2,3) => (2) = (2*163)⊕163 = 101000110 ⊕ 10100011 = 11111110
(1,3)*(3,3) => (3) = 1 * 110 = 110

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  01111101⊕
  11011110⊕
  11111110⊕
  00000110
= 01011011 | 91 | 5b

(2,0)*(0,0) => (0) = 1 * 1100010 = 1100010
(2,1)*(1,0) => (1) = 1 * 10110101 = 10110101
(2,2)*(2,0) => (2) = 2*14 = 10 * 1110 = 11100
(2,3)*(3,0) => (3) = (2*0)⊕0 = 0 ⊕ 0 = 0

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  01100010⊕
  10110101⊕
  00011100⊕
  00000000
= 11001011 | 203 | cb

(2,0)*(0,1) => (0) = 1 * 101111 = 101111
(2,1)*(1,1) => (1) = 1 * 11101010 = 11101010
(2,2)*(2,1) => (2) = 2*194 = 10 * 11000010 = 10011111
(2,3)*(3,1) => (3) = (2*49)⊕49 = 1100010 ⊕ 110001 = 1010011

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  00101111⊕
  11101010⊕
  10011111⊕
  01010011
= 00001001 | 9 | 09

(2,0)*(0,2) => (0) = 1 * 10000100 = 10000100
(2,1)*(1,2) => (1) = 1 * 11111110 = 11111110
(2,2)*(2,2) => (2) = 2*20 = 10 * 10100 = 101000
(2,3)*(3,2) => (3) = (2*30)⊕30 = 111100 ⊕ 11110 = 100010

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  10000100⊕
  11111110⊕
  00101000⊕
  00100010
= 01110000 | 112 | 70

(2,0)*(0,3) => (0) = 1 * 1111101 = 1111101
(2,1)*(1,3) => (1) = 1 * 1101111 = 1101111
(2,2)*(2,3) => (2) = 2*163 = 10 * 10100011 = 1011101
(2,3)*(3,3) => (3) = (2*6)⊕6 = 1100 ⊕ 110 = 1010

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  01111101⊕
  01101111⊕
  01011101⊕
  00001010
= 01000101 | 69 | 45

(3,0)*(0,0) => (0) = (2*98)⊕98 = 11000100 ⊕ 1100010 = 10100110
(3,1)*(1,0) => (1) = 1 * 10110101 = 10110101
(3,2)*(2,0) => (2) = 1 * 1110 = 1110
(3,3)*(3,0) => (3) = 2*0 = 10 * 0 = 0

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  10100110⊕
  10110101⊕
  00001110⊕
  00000000
= 00011101 | 29 | 1d

(3,0)*(0,1) => (0) = (2*47)⊕47 = 1011110 ⊕ 101111 = 1110001
(3,1)*(1,1) => (1) = 1 * 11101010 = 11101010
(3,2)*(2,1) => (2) = 1 * 11000010 = 11000010
(3,3)*(3,1) => (3) = 2*49 = 10 * 110001 = 1100010

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  01110001⊕
  11101010⊕
  11000010⊕
  01100010
= 00111011 | 59 | 3b

(3,0)*(0,2) => (0) = (2*132)⊕132 = 100001000 ⊕ 10000100 = 10010111
(3,1)*(1,2) => (1) = 1 * 11111110 = 11111110
(3,2)*(2,2) => (2) = 1 * 10100 = 10100
(3,3)*(3,2) => (3) = 2*30 = 10 * 11110 = 111100

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  10010111⊕
  11111110⊕
  00010100⊕
  00111100
= 01000001 | 65 | 41

(3,0)*(0,3) => (0) = (2*125)⊕125 = 11111010 ⊕ 1111101 = 10000111
(3,1)*(1,3) => (1) = 1 * 1101111 = 1101111
(3,2)*(2,3) => (2) = 1 * 10100011 = 10100011
(3,3)*(3,3) => (3) = 2*6 = 10 * 110 = 1100

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  10000111⊕
  01101111⊕
  10100011⊕
  00001100
= 01000111 | 71 | 47

=======>state_matrix<=======
0e  88  00  ee
01  8c  41  5b
cb  09  70  45
1d  3b  41  47
 4) ⊕ RK_matrix[0]:
d6  d0  4f  be
c1  a1  54  09
8e  d9  50  e7
0f  ae  91  83
=======>state_matrix<=======
d8  58  4f  50
c0  2d  15  52
45  d0  20  a2
12  95  d0  c4
=======> CIPHERTEXT: d8 c0 45 12 58 2d d0 95 4f 15 20 d0 50 52 a2 c4 

Add Roundkey Round 7 ===============================================
 state_matrix:
d8  58  4f  50
c0  2d  15  52
45  d0  20  a2
12  95  d0  c4
 1) Substitution S-box =>
61  6a  84  53
ba  d8  59  00
6e  70  b7  3a
c9  2a  70  1c
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
61  6a  84  53
d8  59  00  ba
b7  3a  6e  70
1c  c9  2a  70

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*97 = 10 * 1100001 = 11000010
(0,1)*(1,0) => (1) = (2*216)⊕216 = 110110000 ⊕ 11011000 = 1110011
(0,2)*(2,0) => (2) = 1 * 10110111 = 10110111
(0,3)*(3,0) => (3) = 1 * 11100 = 11100

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  11000010⊕
  01110011⊕
  10110111⊕
  00011100
= 00011010 | 26 | 1a

(0,0)*(0,1) => (0) = 2*106 = 10 * 1101010 = 11010100
(0,1)*(1,1) => (1) = (2*89)⊕89 = 10110010 ⊕ 1011001 = 11101011
(0,2)*(2,1) => (2) = 1 * 111010 = 111010
(0,3)*(3,1) => (3) = 1 * 11001001 = 11001001

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  11010100⊕
  11101011⊕
  00111010⊕
  11001001
= 11001100 | 204 | cc

(0,0)*(0,2) => (0) = 2*132 = 10 * 10000100 = 10011
(0,1)*(1,2) => (1) = (2*0)⊕0 = 0 ⊕ 0 = 0
(0,2)*(2,2) => (2) = 1 * 1101110 = 1101110
(0,3)*(3,2) => (3) = 1 * 101010 = 101010

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  00010011⊕
  00000000⊕
  01101110⊕
  00101010
= 01010111 | 87 | 57

(0,0)*(0,3) => (0) = 2*83 = 10 * 1010011 = 10100110
(0,1)*(1,3) => (1) = (2*186)⊕186 = 101110100 ⊕ 10111010 = 11010101
(0,2)*(2,3) => (2) = 1 * 1110000 = 1110000
(0,3)*(3,3) => (3) = 1 * 1110000 = 1110000

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  10100110⊕
  11010101⊕
  01110000⊕
  01110000
= 01110011 | 115 | 73

(1,0)*(0,0) => (0) = 1 * 1100001 = 1100001
(1,1)*(1,0) => (1) = 2*216 = 10 * 11011000 = 10101011
(1,2)*(2,0) => (2) = (2*183)⊕183 = 101101110 ⊕ 10110111 = 11000010
(1,3)*(3,0) => (3) = 1 * 11100 = 11100

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  01100001⊕
  10101011⊕
  11000010⊕
  00011100
= 00010100 | 20 | 14

(1,0)*(0,1) => (0) = 1 * 1101010 = 1101010
(1,1)*(1,1) => (1) = 2*89 = 10 * 1011001 = 10110010
(1,2)*(2,1) => (2) = (2*58)⊕58 = 1110100 ⊕ 111010 = 1001110
(1,3)*(3,1) => (3) = 1 * 11001001 = 11001001

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  01101010⊕
  10110010⊕
  01001110⊕
  11001001
= 01011111 | 95 | 5f

(1,0)*(0,2) => (0) = 1 * 10000100 = 10000100
(1,1)*(1,2) => (1) = 2*0 = 10 * 0 = 0
(1,2)*(2,2) => (2) = (2*110)⊕110 = 11011100 ⊕ 1101110 = 10110010
(1,3)*(3,2) => (3) = 1 * 101010 = 101010

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  10000100⊕
  00000000⊕
  10110010⊕
  00101010
= 00011100 | 28 | 1c

(1,0)*(0,3) => (0) = 1 * 1010011 = 1010011
(1,1)*(1,3) => (1) = 2*186 = 10 * 10111010 = 1101111
(1,2)*(2,3) => (2) = (2*112)⊕112 = 11100000 ⊕ 1110000 = 10010000
(1,3)*(3,3) => (3) = 1 * 1110000 = 1110000

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  01010011⊕
  01101111⊕
  10010000⊕
  01110000
= 11011100 | 220 | dc

(2,0)*(0,0) => (0) = 1 * 1100001 = 1100001
(2,1)*(1,0) => (1) = 1 * 11011000 = 11011000
(2,2)*(2,0) => (2) = 2*183 = 10 * 10110111 = 1110101
(2,3)*(3,0) => (3) = (2*28)⊕28 = 111000 ⊕ 11100 = 100100

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  01100001⊕
  11011000⊕
  01110101⊕
  00100100
= 11101000 | 232 | e8

(2,0)*(0,1) => (0) = 1 * 1101010 = 1101010
(2,1)*(1,1) => (1) = 1 * 1011001 = 1011001
(2,2)*(2,1) => (2) = 2*58 = 10 * 111010 = 1110100
(2,3)*(3,1) => (3) = (2*201)⊕201 = 110010010 ⊕ 11001001 = 1000000

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  01101010⊕
  01011001⊕
  01110100⊕
  01000000
= 00000111 | 7 | 07

(2,0)*(0,2) => (0) = 1 * 10000100 = 10000100
(2,1)*(1,2) => (1) = 1 * 0 = 0
(2,2)*(2,2) => (2) = 2*110 = 10 * 1101110 = 11011100
(2,3)*(3,2) => (3) = (2*42)⊕42 = 1010100 ⊕ 101010 = 1111110

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  10000100⊕
  00000000⊕
  11011100⊕
  01111110
= 00100110 | 38 | 26

(2,0)*(0,3) => (0) = 1 * 1010011 = 1010011
(2,1)*(1,3) => (1) = 1 * 10111010 = 10111010
(2,2)*(2,3) => (2) = 2*112 = 10 * 1110000 = 11100000
(2,3)*(3,3) => (3) = (2*112)⊕112 = 11100000 ⊕ 1110000 = 10010000

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  01010011⊕
  10111010⊕
  11100000⊕
  10010000
= 10011001 | 153 | 99

(3,0)*(0,0) => (0) = (2*97)⊕97 = 11000010 ⊕ 1100001 = 10100011
(3,1)*(1,0) => (1) = 1 * 11011000 = 11011000
(3,2)*(2,0) => (2) = 1 * 10110111 = 10110111
(3,3)*(3,0) => (3) = 2*28 = 10 * 11100 = 111000

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  10100011⊕
  11011000⊕
  10110111⊕
  00111000
= 11110100 | 244 | f4

(3,0)*(0,1) => (0) = (2*106)⊕106 = 11010100 ⊕ 1101010 = 10111110
(3,1)*(1,1) => (1) = 1 * 1011001 = 1011001
(3,2)*(2,1) => (2) = 1 * 111010 = 111010
(3,3)*(3,1) => (3) = 2*201 = 10 * 11001001 = 10001001

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  10111110⊕
  01011001⊕
  00111010⊕
  10001001
= 01010100 | 84 | 54

(3,0)*(0,2) => (0) = (2*132)⊕132 = 100001000 ⊕ 10000100 = 10010111
(3,1)*(1,2) => (1) = 1 * 0 = 0
(3,2)*(2,2) => (2) = 1 * 1101110 = 1101110
(3,3)*(3,2) => (3) = 2*42 = 10 * 101010 = 1010100

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  10010111⊕
  00000000⊕
  01101110⊕
  01010100
= 10101101 | 173 | ad

(3,0)*(0,3) => (0) = (2*83)⊕83 = 10100110 ⊕ 1010011 = 11110101
(3,1)*(1,3) => (1) = 1 * 10111010 = 10111010
(3,2)*(2,3) => (2) = 1 * 1110000 = 1110000
(3,3)*(3,3) => (3) = 2*112 = 10 * 1110000 = 11100000

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  11110101⊕
  10111010⊕
  01110000⊕
  11100000
= 11011111 | 223 | df

=======>state_matrix<=======
1a  cc  57  73
14  5f  1c  dc
e8  07  26  99
f4  54  ad  df
 4) ⊕ RK_matrix[0]:
97  47  08  b6
55  f4  a0  a9
62  bb  eb  0c
a1  0f  9e  1d
=======>state_matrix<=======
8d  8b  5f  c5
41  ab  bc  75
8a  bc  cd  95
55  5b  33  c2
=======> CIPHERTEXT: 8d 41 8a 55 8b ab bc 5b 5f bc cd 33 c5 75 95 c2 

Add Roundkey Round 8 ===============================================
 state_matrix:
8d  8b  5f  c5
41  ab  bc  75
8a  bc  cd  95
55  5b  33  c2
 1) Substitution S-box =>
5d  3d  cf  a6
83  62  65  9d
7e  65  bd  2a
fc  39  c3  25
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
5d  3d  cf  a6
62  65  9d  83
bd  2a  7e  65
25  fc  39  c3

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*93 = 10 * 1011101 = 10111010
(0,1)*(1,0) => (1) = (2*98)⊕98 = 11000100 ⊕ 1100010 = 10100110
(0,2)*(2,0) => (2) = 1 * 10111101 = 10111101
(0,3)*(3,0) => (3) = 1 * 100101 = 100101

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  10111010⊕
  10100110⊕
  10111101⊕
  00100101
= 10000100 | 132 | 84

(0,0)*(0,1) => (0) = 2*61 = 10 * 111101 = 1111010
(0,1)*(1,1) => (1) = (2*101)⊕101 = 11001010 ⊕ 1100101 = 10101111
(0,2)*(2,1) => (2) = 1 * 101010 = 101010
(0,3)*(3,1) => (3) = 1 * 11111100 = 11111100

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  01111010⊕
  10101111⊕
  00101010⊕
  11111100
= 00000011 | 3 | 03

(0,0)*(0,2) => (0) = 2*207 = 10 * 11001111 = 10000101
(0,1)*(1,2) => (1) = (2*157)⊕157 = 100111010 ⊕ 10011101 = 10111100
(0,2)*(2,2) => (2) = 1 * 1111110 = 1111110
(0,3)*(3,2) => (3) = 1 * 111001 = 111001

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  10000101⊕
  10111100⊕
  01111110⊕
  00111001
= 01111110 | 126 | 7e

(0,0)*(0,3) => (0) = 2*166 = 10 * 10100110 = 1010111
(0,1)*(1,3) => (1) = (2*131)⊕131 = 100000110 ⊕ 10000011 = 10011110
(0,2)*(2,3) => (2) = 1 * 1100101 = 1100101
(0,3)*(3,3) => (3) = 1 * 11000011 = 11000011

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  01010111⊕
  10011110⊕
  01100101⊕
  11000011
= 01101111 | 111 | 6f

(1,0)*(0,0) => (0) = 1 * 1011101 = 1011101
(1,1)*(1,0) => (1) = 2*98 = 10 * 1100010 = 11000100
(1,2)*(2,0) => (2) = (2*189)⊕189 = 101111010 ⊕ 10111101 = 11011100
(1,3)*(3,0) => (3) = 1 * 100101 = 100101

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  01011101⊕
  11000100⊕
  11011100⊕
  00100101
= 01100000 | 96 | 60

(1,0)*(0,1) => (0) = 1 * 111101 = 111101
(1,1)*(1,1) => (1) = 2*101 = 10 * 1100101 = 11001010
(1,2)*(2,1) => (2) = (2*42)⊕42 = 1010100 ⊕ 101010 = 1111110
(1,3)*(3,1) => (3) = 1 * 11111100 = 11111100

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  00111101⊕
  11001010⊕
  01111110⊕
  11111100
= 01110101 | 117 | 75

(1,0)*(0,2) => (0) = 1 * 11001111 = 11001111
(1,1)*(1,2) => (1) = 2*157 = 10 * 10011101 = 100001
(1,2)*(2,2) => (2) = (2*126)⊕126 = 11111100 ⊕ 1111110 = 10000010
(1,3)*(3,2) => (3) = 1 * 111001 = 111001

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  11001111⊕
  00100001⊕
  10000010⊕
  00111001
= 01010101 | 85 | 55

(1,0)*(0,3) => (0) = 1 * 10100110 = 10100110
(1,1)*(1,3) => (1) = 2*131 = 10 * 10000011 = 11101
(1,2)*(2,3) => (2) = (2*101)⊕101 = 11001010 ⊕ 1100101 = 10101111
(1,3)*(3,3) => (3) = 1 * 11000011 = 11000011

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  10100110⊕
  00011101⊕
  10101111⊕
  11000011
= 11010111 | 215 | d7

(2,0)*(0,0) => (0) = 1 * 1011101 = 1011101
(2,1)*(1,0) => (1) = 1 * 1100010 = 1100010
(2,2)*(2,0) => (2) = 2*189 = 10 * 10111101 = 1100001
(2,3)*(3,0) => (3) = (2*37)⊕37 = 1001010 ⊕ 100101 = 1101111

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  01011101⊕
  01100010⊕
  01100001⊕
  01101111
= 00110001 | 49 | 31

(2,0)*(0,1) => (0) = 1 * 111101 = 111101
(2,1)*(1,1) => (1) = 1 * 1100101 = 1100101
(2,2)*(2,1) => (2) = 2*42 = 10 * 101010 = 1010100
(2,3)*(3,1) => (3) = (2*252)⊕252 = 111111000 ⊕ 11111100 = 11111

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  00111101⊕
  01100101⊕
  01010100⊕
  00011111
= 00010011 | 19 | 13

(2,0)*(0,2) => (0) = 1 * 11001111 = 11001111
(2,1)*(1,2) => (1) = 1 * 10011101 = 10011101
(2,2)*(2,2) => (2) = 2*126 = 10 * 1111110 = 11111100
(2,3)*(3,2) => (3) = (2*57)⊕57 = 1110010 ⊕ 111001 = 1001011

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  11001111⊕
  10011101⊕
  11111100⊕
  01001011
= 11100101 | 229 | e5

(2,0)*(0,3) => (0) = 1 * 10100110 = 10100110
(2,1)*(1,3) => (1) = 1 * 10000011 = 10000011
(2,2)*(2,3) => (2) = 2*101 = 10 * 1100101 = 11001010
(2,3)*(3,3) => (3) = (2*195)⊕195 = 110000110 ⊕ 11000011 = 1011110

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  10100110⊕
  10000011⊕
  11001010⊕
  01011110
= 10110001 | 177 | b1

(3,0)*(0,0) => (0) = (2*93)⊕93 = 10111010 ⊕ 1011101 = 11100111
(3,1)*(1,0) => (1) = 1 * 1100010 = 1100010
(3,2)*(2,0) => (2) = 1 * 10111101 = 10111101
(3,3)*(3,0) => (3) = 2*37 = 10 * 100101 = 1001010

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  11100111⊕
  01100010⊕
  10111101⊕
  01001010
= 01110010 | 114 | 72

(3,0)*(0,1) => (0) = (2*61)⊕61 = 1111010 ⊕ 111101 = 1000111
(3,1)*(1,1) => (1) = 1 * 1100101 = 1100101
(3,2)*(2,1) => (2) = 1 * 101010 = 101010
(3,3)*(3,1) => (3) = 2*252 = 10 * 11111100 = 11100011

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  01000111⊕
  01100101⊕
  00101010⊕
  11100011
= 11101011 | 235 | eb

(3,0)*(0,2) => (0) = (2*207)⊕207 = 110011110 ⊕ 11001111 = 1001010
(3,1)*(1,2) => (1) = 1 * 10011101 = 10011101
(3,2)*(2,2) => (2) = 1 * 1111110 = 1111110
(3,3)*(3,2) => (3) = 2*57 = 10 * 111001 = 1110010

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  01001010⊕
  10011101⊕
  01111110⊕
  01110010
= 11011011 | 219 | db

(3,0)*(0,3) => (0) = (2*166)⊕166 = 101001100 ⊕ 10100110 = 11110001
(3,1)*(1,3) => (1) = 1 * 10000011 = 10000011
(3,2)*(2,3) => (2) = 1 * 1100101 = 1100101
(3,3)*(3,3) => (3) = 2*195 = 10 * 11000011 = 10011101

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  11110001⊕
  10000011⊕
  01100101⊕
  10011101
= 10001010 | 138 | 8a

=======>state_matrix<=======
84  03  7e  6f
60  75  55  d7
31  13  e5  b1
72  eb  db  8a
 4) ⊕ RK_matrix[0]:
c4  83  8b  3d
ab  5f  ff  56
c6  7d  96  9a
ef  e0  7e  63
=======>state_matrix<=======
40  80  f5  52
cb  2a  aa  81
f7  6e  73  2b
9d  0b  a5  e9
=======> CIPHERTEXT: 40 cb f7 9d 80 2a 6e 0b f5 aa 73 a5 52 81 2b e9 

Add Roundkey Round 9 ===============================================
 state_matrix:
40  80  f5  52
cb  2a  aa  81
f7  6e  73  2b
9d  0b  a5  e9
 1) Substitution S-box =>
09  cd  e6  00
1f  e5  ac  0c
68  9f  8f  f1
5e  2b  06  1e
 2) Rows are shifted <left by offsets of 0,1,2, and 3 =>
09  cd  e6  00
e5  ac  0c  1f
8f  f1  68  9f
1e  5e  2b  06

 3) Mix Column:
multiplies 'fixed_matrix' ⊕ state_matrix
 i_j   i_j
(0,0)*(0,0) => (0) = 2*9 = 10 * 1001 = 10010
(0,1)*(1,0) => (1) = (2*229)⊕229 = 111001010 ⊕ 11100101 = 110100
(0,2)*(2,0) => (2) = 1 * 10001111 = 10001111
(0,3)*(3,0) => (3) = 1 * 11110 = 11110

state_matrix[0][0] = (0)⊕(1)⊕(2)⊕(3)
  00010010⊕
  00110100⊕
  10001111⊕
  00011110
= 10110111 | 183 | b7

(0,0)*(0,1) => (0) = 2*205 = 10 * 11001101 = 10000001
(0,1)*(1,1) => (1) = (2*172)⊕172 = 101011000 ⊕ 10101100 = 11101111
(0,2)*(2,1) => (2) = 1 * 11110001 = 11110001
(0,3)*(3,1) => (3) = 1 * 1011110 = 1011110

state_matrix[0][1] = (0)⊕(1)⊕(2)⊕(3)
  10000001⊕
  11101111⊕
  11110001⊕
  01011110
= 11000001 | 193 | c1

(0,0)*(0,2) => (0) = 2*230 = 10 * 11100110 = 11010111
(0,1)*(1,2) => (1) = (2*12)⊕12 = 11000 ⊕ 1100 = 10100
(0,2)*(2,2) => (2) = 1 * 1101000 = 1101000
(0,3)*(3,2) => (3) = 1 * 101011 = 101011

state_matrix[0][2] = (0)⊕(1)⊕(2)⊕(3)
  11010111⊕
  00010100⊕
  01101000⊕
  00101011
= 10000000 | 128 | 80

(0,0)*(0,3) => (0) = 2*0 = 10 * 0 = 0
(0,1)*(1,3) => (1) = (2*31)⊕31 = 111110 ⊕ 11111 = 100001
(0,2)*(2,3) => (2) = 1 * 10011111 = 10011111
(0,3)*(3,3) => (3) = 1 * 110 = 110

state_matrix[0][3] = (0)⊕(1)⊕(2)⊕(3)
  00000000⊕
  00100001⊕
  10011111⊕
  00000110
= 10111000 | 184 | b8

(1,0)*(0,0) => (0) = 1 * 1001 = 1001
(1,1)*(1,0) => (1) = 2*229 = 10 * 11100101 = 11010001
(1,2)*(2,0) => (2) = (2*143)⊕143 = 100011110 ⊕ 10001111 = 10001010
(1,3)*(3,0) => (3) = 1 * 11110 = 11110

state_matrix[1][0] = (0)⊕(1)⊕(2)⊕(3)
  00001001⊕
  11010001⊕
  10001010⊕
  00011110
= 01001100 | 76 | 4c

(1,0)*(0,1) => (0) = 1 * 11001101 = 11001101
(1,1)*(1,1) => (1) = 2*172 = 10 * 10101100 = 1000011
(1,2)*(2,1) => (2) = (2*241)⊕241 = 111100010 ⊕ 11110001 = 1000
(1,3)*(3,1) => (3) = 1 * 1011110 = 1011110

state_matrix[1][1] = (0)⊕(1)⊕(2)⊕(3)
  11001101⊕
  01000011⊕
  00001000⊕
  01011110
= 11011000 | 216 | d8

(1,0)*(0,2) => (0) = 1 * 11100110 = 11100110
(1,1)*(1,2) => (1) = 2*12 = 10 * 1100 = 11000
(1,2)*(2,2) => (2) = (2*104)⊕104 = 11010000 ⊕ 1101000 = 10111000
(1,3)*(3,2) => (3) = 1 * 101011 = 101011

state_matrix[1][2] = (0)⊕(1)⊕(2)⊕(3)
  11100110⊕
  00011000⊕
  10111000⊕
  00101011
= 01101101 | 109 | 6d

(1,0)*(0,3) => (0) = 1 * 0 = 0
(1,1)*(1,3) => (1) = 2*31 = 10 * 11111 = 111110
(1,2)*(2,3) => (2) = (2*159)⊕159 = 100111110 ⊕ 10011111 = 10111010
(1,3)*(3,3) => (3) = 1 * 110 = 110

state_matrix[1][3] = (0)⊕(1)⊕(2)⊕(3)
  00000000⊕
  00111110⊕
  10111010⊕
  00000110
= 10000010 | 130 | 82

(2,0)*(0,0) => (0) = 1 * 1001 = 1001
(2,1)*(1,0) => (1) = 1 * 11100101 = 11100101
(2,2)*(2,0) => (2) = 2*143 = 10 * 10001111 = 101
(2,3)*(3,0) => (3) = (2*30)⊕30 = 111100 ⊕ 11110 = 100010

state_matrix[2][0] = (0)⊕(1)⊕(2)⊕(3)
  00001001⊕
  11100101⊕
  00000101⊕
  00100010
= 11001011 | 203 | cb

(2,0)*(0,1) => (0) = 1 * 11001101 = 11001101
(2,1)*(1,1) => (1) = 1 * 10101100 = 10101100
(2,2)*(2,1) => (2) = 2*241 = 10 * 11110001 = 11111001
(2,3)*(3,1) => (3) = (2*94)⊕94 = 10111100 ⊕ 1011110 = 11100010

state_matrix[2][1] = (0)⊕(1)⊕(2)⊕(3)
  11001101⊕
  10101100⊕
  11111001⊕
  11100010
= 01111010 | 122 | 7a

(2,0)*(0,2) => (0) = 1 * 11100110 = 11100110
(2,1)*(1,2) => (1) = 1 * 1100 = 1100
(2,2)*(2,2) => (2) = 2*104 = 10 * 1101000 = 11010000
(2,3)*(3,2) => (3) = (2*43)⊕43 = 1010110 ⊕ 101011 = 1111101

state_matrix[2][2] = (0)⊕(1)⊕(2)⊕(3)
  11100110⊕
  00001100⊕
  11010000⊕
  01111101
= 01000111 | 71 | 47

(2,0)*(0,3) => (0) = 1 * 0 = 0
(2,1)*(1,3) => (1) = 1 * 11111 = 11111
(2,2)*(2,3) => (2) = 2*159 = 10 * 10011111 = 100101
(2,3)*(3,3) => (3) = (2*6)⊕6 = 1100 ⊕ 110 = 1010

state_matrix[2][3] = (0)⊕(1)⊕(2)⊕(3)
  00000000⊕
  00011111⊕
  00100101⊕
  00001010
= 00110000 | 48 | 30

(3,0)*(0,0) => (0) = (2*9)⊕9 = 10010 ⊕ 1001 = 11011
(3,1)*(1,0) => (1) = 1 * 11100101 = 11100101
(3,2)*(2,0) => (2) = 1 * 10001111 = 10001111
(3,3)*(3,0) => (3) = 2*30 = 10 * 11110 = 111100

state_matrix[3][0] = (0)⊕(1)⊕(2)⊕(3)
  00011011⊕
  11100101⊕
  10001111⊕
  00111100
= 01001101 | 77 | 4d

(3,0)*(0,1) => (0) = (2*205)⊕205 = 110011010 ⊕ 11001101 = 1001100
(3,1)*(1,1) => (1) = 1 * 10101100 = 10101100
(3,2)*(2,1) => (2) = 1 * 11110001 = 11110001
(3,3)*(3,1) => (3) = 2*94 = 10 * 1011110 = 10111100

state_matrix[3][1] = (0)⊕(1)⊕(2)⊕(3)
  01001100⊕
  10101100⊕
  11110001⊕
  10111100
= 10101101 | 173 | ad

(3,0)*(0,2) => (0) = (2*230)⊕230 = 111001100 ⊕ 11100110 = 110001
(3,1)*(1,2) => (1) = 1 * 1100 = 1100
(3,2)*(2,2) => (2) = 1 * 1101000 = 1101000
(3,3)*(3,2) => (3) = 2*43 = 10 * 101011 = 1010110

state_matrix[3][2] = (0)⊕(1)⊕(2)⊕(3)
  00110001⊕
  00001100⊕
  01101000⊕
  01010110
= 00000011 | 3 | 03

(3,0)*(0,3) => (0) = (2*0)⊕0 = 0 ⊕ 0 = 0
(3,1)*(1,3) => (1) = 1 * 11111 = 11111
(3,2)*(2,3) => (2) = 1 * 10011111 = 10011111
(3,3)*(3,3) => (3) = 2*6 = 10 * 110 = 1100

state_matrix[3][3] = (0)⊕(1)⊕(2)⊕(3)
  00000000⊕
  00011111⊕
  10011111⊕
  00001100
= 10001100 | 140 | 8c

=======>state_matrix<=======
b7  c1  80  b8
4c  d8  6d  82
cb  7a  47  30
4d  ad  03  8c
 4) ⊕ RK_matrix[0]:
6e  ed  66  5b
13  4c  b3  e5
3d  40  d6  4c
c8  28  56  35
=======>state_matrix<=======
d9  2c  e6  e3
5f  94  de  67
f6  3a  91  7c
85  85  55  b9
=======> CIPHERTEXT: d9 5f f6 85 2c 94 3a 85 e6 de 91 55 e3 67 7c b9 

Add Roundkey Round 10 ===============================================
 1) Substitution S-box =>
35  71  8e  11
cf  22  1d  85
42  80  81  10
97  97  fc  56
 2) Rows are shifted <-left by offsets of 0,1,2, and 3 =>
35  71  8e  11
22  1d  85  cf
81  10  42  80
56  97  97  fc
 3) ⊕ RK_matrix[10]:
81  6c  0a  51
3a  76  c5  20
ab  eb  3d  71
f1  d9  8f  ba
=======>state_matrix<=======
b4  1d  84  40
18  6b  40  ef
2a  fb  7f  f1
a7  4e  18  46
=======> CIPHERTEXT: b4 18 2a a7 1d 6b fb 4e 84 40 7f 18 40 ef f1 46 


====================================================================
Encrypted Plaintext: b4 18 2a a7 1d 6b fb 4e 84 40 7f 18 40 ef f1 46 
====================================================================


Add Round Keys:
--------------------------------------------------------------------
Add Roundkey Round 0 ===============================================
 state matrix: (encrypted text as matrix)
b4  1d  84  40
18  6b  40  ef
2a  fb  7f  f1
a7  4e  18  46
 ⊕ RK_matrix[10]:
81  6c  0a  51
3a  76  c5  20
ab  eb  3d  71
f1  d9  8f  ba
=======>state_matrix<=======
35  71  8e  11
22  1d  85  cf
81  10  42  80
56  97  97  fc
 2) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
35  71  8e  11
cf  22  1d  85
42  80  81  10
97  97  fc  56
 3) Substitution S-box =>
d9  2c  e6  e3
5f  94  de  67
f6  3a  91  7c
85  85  55  b9

Add Roundkey Round 1 ===============================================
 state_matrix:
d9  2c  e6  e3
5f  94  de  67
f6  3a  91  7c
85  85  55  b9
 1) ⊕ RK_matrix[9]:
6e  ed  66  5b
13  4c  b3  e5
3d  40  d6  4c
c8  28  56  35
=======>state_matrix<=======
b7  c1  80  b8
4c  d8  6d  82
cb  7a  47  30
4d  ad  03  8c
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
09  cd  e6  00
e5  ac  0c  1f
8f  f1  68  9f
1e  5e  2b  06
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
09  cd  e6  00
1f  e5  ac  0c
68  9f  8f  f1
5e  2b  06  1e
 4) Substitution S-box-inv =>
40  80  f5  52
cb  2a  aa  81
f7  6e  73  2b
9d  0b  a5  e9

Add Roundkey Round 2 ===============================================
 state_matrix:
40  80  f5  52
cb  2a  aa  81
f7  6e  73  2b
9d  0b  a5  e9
 1) ⊕ RK_matrix[8]:
c4  83  8b  3d
ab  5f  ff  56
c6  7d  96  9a
ef  e0  7e  63
=======>state_matrix<=======
84  03  7e  6f
60  75  55  d7
31  13  e5  b1
72  eb  db  8a
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
5d  3d  cf  a6
62  65  9d  83
bd  2a  7e  65
25  fc  39  c3
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
5d  3d  cf  a6
83  62  65  9d
7e  65  bd  2a
fc  39  c3  25
 4) Substitution S-box-inv =>
8d  8b  5f  c5
41  ab  bc  75
8a  bc  cd  95
55  5b  33  c2

Add Roundkey Round 3 ===============================================
 state_matrix:
8d  8b  5f  c5
41  ab  bc  75
8a  bc  cd  95
55  5b  33  c2
 1) ⊕ RK_matrix[7]:
97  47  08  b6
55  f4  a0  a9
62  bb  eb  0c
a1  0f  9e  1d
=======>state_matrix<=======
1a  cc  57  73
14  5f  1c  dc
e8  07  26  99
f4  54  ad  df
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
61  6a  84  53
d8  59  00  ba
b7  3a  6e  70
1c  c9  2a  70
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
61  6a  84  53
ba  d8  59  00
6e  70  b7  3a
c9  2a  70  1c
 4) Substitution S-box-inv =>
d8  58  4f  50
c0  2d  15  52
45  d0  20  a2
12  95  d0  c4

Add Roundkey Round 4 ===============================================
 state_matrix:
d8  58  4f  50
c0  2d  15  52
45  d0  20  a2
12  95  d0  c4
 1) ⊕ RK_matrix[6]:
d6  d0  4f  be
c1  a1  54  09
8e  d9  50  e7
0f  ae  91  83
=======>state_matrix<=======
0e  88  00  ee
01  8c  41  5b
cb  09  70  45
1d  3b  41  47
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
62  2f  84  7d
b5  ea  fe  6f
0e  c2  14  a3
00  31  1e  06
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
62  2f  84  7d
6f  b5  ea  fe
14  a3  0e  c2
31  1e  06  00
 4) Substitution S-box-inv =>
ab  4e  4f  13
06  d2  bb  0c
9b  71  d7  a8
2e  e9  a5  52

Add Roundkey Round 5 ===============================================
 state_matrix:
ab  4e  4f  13
06  d2  bb  0c
9b  71  d7  a8
2e  e9  a5  52
 1) ⊕ RK_matrix[5]:
ba  06  9f  f1
68  60  f5  5d
47  57  89  b7
ae  a1  3f  12
=======>state_matrix<=======
11  48  d0  e2
6e  b2  4e  51
dc  26  5e  1f
80  48  9a  40
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
d6  5c  45  8b
a4  1c  af  44
5d  01  7f  b5
0c  d5  cf  96
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
d6  5c  45  8b
44  a4  1c  af
7f  b5  5d  01
d5  cf  96  0c
 4) Substitution S-box-inv =>
4a  a7  68  ce
86  1d  c4  1b
6b  d2  8d  09
b5  5f  35  81

Add Roundkey Round 6 ===============================================
 state_matrix:
4a  a7  68  ce
86  1d  c4  1b
6b  d2  8d  09
b5  5f  35  81
 1) ⊕ RK_matrix[4]:
68  bc  99  6e
da  08  95  a8
9f  10  de  3e
31  0f  9e  2d
=======>state_matrix<=======
22  1b  f1  a0
5c  15  51  b3
f4  c2  53  37
84  50  ab  ac
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
d5  5e  ba  48
24  bf  3e  78
1f  a4  a8  d4
e0  d9  74  6c
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
d5  5e  ba  48
78  24  bf  3e
a8  d4  1f  a4
d9  74  6c  e0
 4) Substitution S-box-inv =>
b5  9d  c0  d4
c1  a6  f4  d1
6f  19  cb  1d
e5  ca  b8  a0

Add Roundkey Round 7 ===============================================
 state_matrix:
b5  9d  c0  d4
c1  a6  f4  d1
6f  19  cb  1d
e5  ca  b8  a0
 1) ⊕ RK_matrix[3]:
47  d4  25  f7
3b  d2  9d  3d
f2  8f  ce  e0
59  3e  91  b3
=======>state_matrix<=======
f2  49  e5  23
fa  74  69  ec
9d  96  05  fd
bc  f4  29  13
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
3f  f3  9c  c1
4d  0c  7d  2d
02  92  27  5d
59  32  66  90
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
3f  f3  9c  c1
2d  4d  0c  7d
27  5d  02  92
32  66  90  59
 4) Substitution S-box-inv =>
25  7e  1c  dd
fa  65  81  13
3d  8d  6a  74
a1  d3  96  15

Add Roundkey Round 8 ===============================================
 state_matrix:
25  7e  1c  dd
fa  65  81  13
3d  8d  6a  74
a1  d3  96  15
 1) ⊕ RK_matrix[2]:
a3  93  f1  d2
0a  e9  4f  a0
61  7d  41  2e
ec  67  af  22
=======>state_matrix<=======
86  ed  ed  0f
f0  8c  ce  b3
5c  f0  2b  5a
4d  b4  39  37
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
5d  4d  3c  20
03  82  4c  5f
49  1a  98  cc
70  f0  d9  62
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
5d  4d  3c  20
5f  03  82  4c
98  cc  49  1a
f0  d9  62  70
 4) Substitution S-box-inv =>
8d  65  6d  54
84  d5  11  5d
e2  27  a4  43
17  e5  ab  d0

Add Roundkey Round 9 ===============================================
 state_matrix:
8d  65  6d  54
84  d5  11  5d
e2  27  a4  43
17  e5  ab  d0
 1) ⊕ RK_matrix[1]:
7e  30  62  23
a2  e3  a6  ef
3c  1c  3c  6f
ca  8b  c8  8d
=======>state_matrix<=======
f3  55  0f  77
26  36  b7  b2
de  3b  98  2c
dd  6e  63  5d
 2) Mix Column:
multiplies 'fixed_matrix' against current state_matrix
=======>state_matrix<=======
ca  ad  63  f2
30  ca  f9  67
50  af  72  da
7c  fe  ab  fb
 3) Rows are shifted right-> by offsets of 0,1,2, and 3 =>
ca  ad  63  f2
67  30  ca  f9
72  da  50  af
fe  ab  fb  7c
 4) Substitution S-box-inv =>
10  18  00  04
0a  08  10  69
1e  7a  6c  1b
0c  0e  63  01

Add Roundkey Round 10 ===============================================
 state_matrix:
10  18  00  04
0a  08  10  69
1e  7a  6c  1b
0c  0e  63  01
 ⊕ RK_matrix[0]:
44  4E  52  41
4F  41  45  49
52  20  20  53
49  41  43  45
=======>state_matrix<=======
54  56  52  45
45  49  55  20
4c  5a  4c  48
45  4f  20  44
=======> CIPHERTEXT: 54 45 4c 45 56 49 5a 4f 52 55 4c 20 45 20 48 44 

-==+1+==- Plaintext: 54 45 4c 45 56 49 5a 4f 52 55 4c 20 45 20 48 44 
-==+2+==- Encrypted: b4 18 2a a7 1d 6b fb 4e 84 40 7f 18 40 ef f1 46 
-==+3+==- Decrypted: 54 45 4c 45 56 49 5a 4f 52 55 4c 20 45 20 48 44 

